<?php
namespace App\Tests\AbstractClass;

use App\Core\Context\Context;
use App\Kernel;
use App\Tests\Component\AssertExtension;
use Doctrine\Common\DataFixtures\ReferenceRepository;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Component\DependencyInjection\Container;

abstract class AbstractUnitTestCase extends WebTestCase
{
    use AssertExtension;

    /**
     * @var string
     */
    private static $_environment = 'test';

    /**
     * @var Container
     */
    protected static $container;

    /**
     * @var Kernel
     */
    protected static $kernel2;

    /**
     * @var  ReferenceRepository
     */
    protected $_oReferenceRepository;

    protected function setUp()
    {
        Context::tearDown();
        parent::setUp();
    }
    
    protected function tearDown()
    {
        Context::tearDown();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public static function setUpBeforeClass()
    {
        parent::setUpBeforeClass();
        self::setGeneralProperties();
    }

    protected static function setGeneralProperties()
    {
        if (!self::$container) {
            self::$kernel2 = static::createKernel(array('environment' => self::$_environment));
            self::$kernel2->boot();
            self::$container = self::$kernel2->getContainer();
        }
    }
    
    /**
     * @return Container
     */
    public function getContainer() : Container
    {
        return self::$container;
    }

    protected static function getPrivateMethod($className, $methodName) : \ReflectionMethod
    {
        $class = new \ReflectionClass($className);
        $method = $class->getMethod($methodName);
        $method->setAccessible(true);

        return $method;
    }

    protected static function getPrivateProperty($className, $property) : \ReflectionProperty
    {
        $class = new \ReflectionClass($className);
        $property = $class->getProperty($property);
        $property->setAccessible(true);

        return $property;
    }

    public function callPrivateMethod($object, string $method, array $args = array())
    {
        $methodInvoke = self::getPrivateMethod(get_class($object), $method);
        return $methodInvoke->invokeArgs($object, $args);
    }

    public function callPrivateProperty($object, string $property)
    {
        $methodInvoke = self::getPrivateProperty(get_class($object), $property);
        return $methodInvoke->getValue($object);
    }


}